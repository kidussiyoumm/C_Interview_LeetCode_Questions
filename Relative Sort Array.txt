 Relative Sort Array


Given two arrays arr1 and arr2, the elements of arr2 are distinct, and all
 elements in arr2 are also in arr1.

Sort the elements of arr1 such that the relative ordering of items in arr1 
are the same as in arr2. Elements that do not appear in arr2 should be placed at the end of arr1 in ascending order.

 

Example 1:

Input: arr1 = [2,3,1,3,2,4,6,7,9,2,19], arr2 = [2,1,4,3,9,6]
Output: [2,2,2,1,4,3,3,9,6,7,19]




public class Solution {
    public int[] RelativeSortArray(int[] arr1, int[] arr2) {
        if(arr1.Length == null){
            return arr2;
        }
        if(arr2.Length == null){
            return arr1;
        }
       
        Dictionary<int, int> frequency = new Dictionary<int,int>();

        for(int i = 0; i < arr2.Length; i++){
           frequency[arr2[i]] = i;
        }


        List<int> inOrder = new List<int>();
        List<int> notInOrder = new List<int>();

        foreach(var nums in arr1){
            if(frequency.ContainsKey(nums)){
                inOrder.Add(nums);
            }else{
                notInOrder.Add(nums);
            }
        }


         // Sort the inOrder list based on the order defined in arr2
        inOrder.Sort((a,b) => frequency[a].CompareTo(frequency[b])); 

        // Sort the notInOrder list in ascending order
        notInOrder.Sort();

         // Combine the two lists
        inOrder.AddRange(notInOrder);

        return inOrder.ToArray(); 

    }
}