Given an array of integers arr and two integers k and threshold, return 
the number of sub-arrays of size k and average greater than or equal to 
threshold.

Example 1:

Input: arr = [2,2,2,2,5,5,5,8], k = 3, threshold = 4
Output: 3
Explanation: Sub-arrays [2,5,5],[5,5,5] and [5,5,8] have averages 4, 5 
and 6 respectively. All other sub-arrays of size 3 have averages less 
than 4 (the threshold).



public class Solution
    {
        public int NumOfSubarrays(int[] arr, int k, int threshold)
        {
            int currentSum = 0;
            int count = 0;

            if (arr.Length == 0 || k == 0)
            {
                return 0;
            }
            //to go through the lenght of k
            for (int i = 0; i < k; i++)
            {
                currentSum += arr[i]; //this will add up all the elements in the array up to k times
            }
            //this is to add the asked output 
            if (currentSum / k >= threshold)
            {
                count++;
            }
            //to iterate throught the remaining subarrays
            for (int i = k; i < arr.Length; i++)
            {
                currentSum = currentSum - arr[i - k] + arr[i]; 

                if (currentSum / k >= threshold)
                {
                    count++;
                }
            }
            return count;
        }

        public static void Main(string[] args)
        {
            Solution sol = new Solution();
            int[] arr = { 2, 2, 2, 2, 5, 5, 5, 8 };
            int k = 3;
            int threshold = 4;
            var result = sol.NumOfSubarrays(arr, k, threshold);
            Console.WriteLine(result);

        }
    }