Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.

You must implement a solution with a linear runtime complexity and use only constant extra space.

 

Example 1:

Input: nums = [2,2,1]
Output: 1

public int singleNumber(int[] repeat)
        {
            if (repeat.Length == 0)
            {
                return 0;
            }

            HashSet<int> hash = new HashSet<int>();

            for (int i = 0; i < repeat.Length; i++)
            {

                if (hash.Contains(repeat[i]))
                {
                    hash.Remove(repeat[i]);
                }
                else
                {
                    hash.Add(repeat[i]);
                }
            }

            return hash.First();
        }
