You are given an array prices where prices[i] is the price of a given
 stock on the ith day.

You want to maximize your profit by choosing a single day to buy one 
stock and choosing a different day in the future to sell that stock.

Return the maximum profit you can achieve from this transaction. If you
 cannot achieve any profit, return 0.

Example 1:

Input: prices = [7,1,5,3,6,4]
Output: 5




 public class soultion
    {
        public int MaxProfit(int[] prices)
        {
            int maxProfit = 0;
            int minPrice = prices[0];
           if(prices == null || prices.Length < 2)
            {
                return 0;
            }
            for (int i = 1; i < prices.Length; i++)
            {
                // Update the minimum price if a lower price is encountered
                minPrice = Math.Min(minPrice, prices[i]);

                // Calculate the potential profit by selling at the current day's price
                int potentialProfit = prices[i] - minPrice;

                // Update the maximum profit if the potential profit is greater
                maxProfit = Math.Max(maxProfit, potentialProfit);
            }

            // Return the final maximum profit
            return maxProfit;


        }

        public static void Main(string[] args)
        {

            int[] prices = { 7, 1, 5, 3, 6, 4 }; 
            soultion sol = new soultion();
            var result = sol.MaxProfit(prices);  
            Console.WriteLine(result);  
    }
}
