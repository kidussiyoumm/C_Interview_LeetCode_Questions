You are given a sorted array consisting of only integers where every
 element appears exactly twice, except for one element which appears
 exactly once.

Return the single element that appears only once.

Your solution must run in O(log n) time and O(1) space.

 

Example 1:

Input: nums = [1,1,2,3,3,4,4,8,8]
Output: 2





public int SingleNonDuplicate(int[] nums)
    {
        if (nums.Length == 0 )
        {
            return 0;
        }

        int left = 0;
        int right = nums.Length - 1;    
        
        if(nums.Length == 1 )
        {
            return nums[left];
        }

        while(left <= right)
        {
            int mid = (left + right) / 2;

            if(nums[mid] != nums[mid-1] && nums[mid] != nums[mid+1])
            {
                return nums[mid]; 
            }

            if (((mid % 2 == 1) && nums[mid] == nums[mid - 1]) ||
                    ((mid % 2 == 0) && nums[mid] == nums[mid + 1]))
            {
                left = mid;
            }
            else
                {
                    right = mid;
                }

            
            

        }
           return -1; 
    }
